O que é Node.js?

É um ambiente que permite a execução de código JavaScript fora do navegador
Antes dele, só conseguimos executar código JavaSCript dentro de um navegador
Motores JavaSCript
Todo navegador possui um motor Javascript (Javascript Engine)
Esse motor converte o código Javascript em código de máquina e o executa (compilação)

V8 Engine
O motor mais popular atualmente é o V8, que é usado pelo Google Chrome
Ele também é usado pelo Node.js

Diferenças entre as Engines
Todas as engines mais populares executam o código da mesma forma, pois elas seguem o ECMAScript
* O ECMAScript é como se fosse um contrato que todas elas seguem 
SpiderMonkey (Firefox), JavaScriptCore (Safari), V8 (Crhome & Node.js)
Entretanto, cada uma possui particularidades que podem afetar o desempenho e uso de memória

A V8, por exemplo, possui Jus-in-Time compilation, o que torna a engine mais rápida de todas

Particularidas de cada ambiente
Embora usem a mesma Javascript Engine, o Chrome e o Node.js adicionam "apetrechos" diferentes à elas
Goocle Crhome:
Possibilidade de manipular o DOM (Document Object Model) por meio do object Document
Possibilidade de acessar informações do navehador com o object window

Node.js
Possibilidade de criar servidores HTTP(APIs)
Possibilidade de manipular arquivos do sistema operacional (criar, editar, deletar)

Em resumo:
O Node.js é um ambiente que permite executarmos código Javascript em um computador
Ele usa a mesma Javascript Engine que o Chrome (V8 Engine)
Ele, assim como o Chrome, adiciona novas funcionalidades à JavaSCript EnginePodemos usá-lo para criar APIs (servidores web)

Como o Node.js funciona?
Possui apenas um núcleo para realizar operações (single threaded)
Suporta várias operações simultâneas (non-blocking). Ele é multi tarefas

Em resumo:
O Node.js consegue executar várias operações ao mesmo tempo usando o seu único núcleo
Em linguagens como Java e C#, um núcleo é criado para cada requisição

Vantagens e Desvantagens
* Vantagens
Baixo uso de memória, pois contém apenas um núcleo
Alta performance (V8 Engine)
Escalabilidade, pois consegue lidar com várias requisições ao memos tempoGrande ecossistema,
 comunidade e presença n o mercado

Desvantagens
Não é ideal para operações que exigem alto uso de computador
Operações matemáticas, processamento de imagem, criptografia, machine learnig

Instalação & Setup

Módulos no Node.js

Introdução ao Módulo.js
Módulos são blocos de código que podemos reutilizar em diferentes partes da nossa aplicação
Podemos exportá-los, importa-los para que outras pessoas possam utiliza-los

Modulos Nativos
O Node.js vem com alguns módulos pré instalados

Módulo FS: manipula arquivos (cria, edita, deleta)
Módulo HTTP: cria um serviedor web
Módulo PATCH: nos ajuda a lidar com diretórios e pastas

 Apretechos do Node.js
 __filename
 __dirname
 
console.log(__filename);
console.log(__dirname);

Deletar arquivo: 
rm -rf message.txt - no wsl, linux
del message.txt - no windows

Deletar/Remover pasta:
rmdir new-folder - no windows

Módulos do NPM
NPM (Node Paackage Manager)
O NPM é um repositório global que contém módulos feitos pela comunidade
Esses módulos, quando instalados, são armazenados no arquivo package.json
Todos os módulos instalados são especificados no arquivo package.json
* Para criá-lo, usamos o comando npm init
* Ele é como se fosse o contrato do nosso projeto Node.js

Também nos referimos aos módulos como depêndencias e bibliotecas

Instalando o NPM:
npm init

Instalando o Nodemon:
npm install nodemon

Instalando o Nodemon: npm install nodemonVerificando a versão:
nodemon -v

Executando o Script:
npm run start

O Nodemon fica monitorando/escutando um arquivo, e a cada alteração/mudança,
 ele Reinicia o arquivo com todas as alterações feitas. 
 Não precismos mais usar o comando node index.js, para executar o arquivo pelo terminal.
 Resumo: Monitora alterações nos arquivos e reinicia o servidor

Execução que não precisa usar script  index.js que stá no package.json
 npx nodemon index.js

 Instalando a depência que gera ID's aleatórios:
 npm install uuid

Removendo a pasta node_modules
rmdir node_modules

Importante: quando removemos a pasta node-modules, 
é como se não tivessemos nehum módulo do NPM instalado no nosso projeto.
Para resolver isso, basta digitar: npm install, 
que ele vai instalar TODAS dependências listas no package.json.
As dependências irão baixar no seu projeto todas atualizadas
Esse acento circunflexo: atualiza as versões das dependências:
"nodemon": "^3.1.10",
"uuid": "^11.1.0"
Isso acontece quando clonamos um repositório no Github

O package-lock.json, guarda a exata versão que está instalada no package.json inicial do projeto (node_modules)
de todas as depêndencias
"nodemon": "^3", => nesse caso ele vai usar qualquer versão 3 do nodemon

O comando npm ci, é similar ao npm install, porém ele instala, as exatas versões
das dependências que estão listadas/basedas no package-lock.json
O comando npm ci, não instala as dependências atualiuzadas
O npm ci, precisa do package-lock.jsom para conseguir executar os comandos e instalar as 
dependências, caso contrário, dá npm ERR!

Importante!
Usa-se:
npm install - para instalar novas dependencias e/ou atualizá-las

Quando clonamos um repositório e nele tem o package-lock.json eque toda equipe de devs, usem a mesmas
versões das dependências dos módulos no projeto
Nesse caso, faz- o clone do projeto do repositório e usa o comando:
npm ci
Que usa a exta versão dos módulos, listados no package-lock.json, e não queremos atualizar as dependências



Tipos de Dependências e Scripts
Tipos de Dependências

Dependências de Produção
São necessárias para a nossa aplicação rodar em produção, 
ou seja, ser usada pelos usuários funcionalidades
Exemplo: React e Express

Dependências de Desenvolvimento
São necessárias apenas durante o processo de Desenvolvimento
Exemplo: ESlint, Prettier e Nodemon

Dependências Globais
São instaladas globalmente no nosso sistema e podem ser usadas em qualquer ptojeto
Exemplo: Nodemon e TypeScript

Removendo o Nodemon
npm uninstall nodemon

Instalando Nodemon cmo dependência de desenvolvimento. devDependencies
npm install nodemon --save-dev
npm install -D nodemon

Conseguimos usar o nodemon: 
npm run start:dev

Quando colocamos o projeto em produção, conseguimos instalar apenas as dependências de Produção,
isso torna o projeto bem mais leve e otimizado

Subindo projeto para produção
Deleta a pasta node-modules
Usa-se a flag production
npm install --production

Removendo o nodemon:
npm uninstall nodemon

Instalando o nodemon globalmente, o mesmo não aparece no package.json
Mas podemos usa-lo como se fosse um programa
nodemon -v
npm install -g nodemon 

Para executar o programa
Nesse caso, é recomendado que haja uma documentação esclarecendo que recisa instalar globalmente 
a dependência do nodemon, pois ela não aparece no arquivo package.json
nodemon index.js

A instalação de dependências globalmente não é recomendada, pois, ela não aparece no package.json
Recomenda-se instalar globalmente: CLI, react native, expo CLi
O que é Node.js?

É um ambiente que permite a execução de código JavaScript fora do navegador
Antes dele, só conseguimos executar código JavaSCript dentro de um navegador
Motores JavaSCript
Todo navegador possui um motor Javascript (Javascript Engine)
Esse motor converte o código Javascript em código de máquina e o executa (compilação)

V8 Engine
O motor mais popular atualmente é o V8, que é usado pelo Google Chrome
Ele também é usado pelo Node.js

Diferenças entre as Engines
Todas as engines mais populares executam o código da mesma forma, pois elas seguem o ECMAScript
* O ECMAScript é como se fosse um contrato que todas elas seguem 
SpiderMonkey (Firefox), JavaScriptCore (Safari), V8 (Crhome & Node.js)
Entretanto, cada uma possui particularidades que podem afetar o desempenho e uso de memória

A V8, por exemplo, possui Jus-in-Time compilation, o que torna a engine mais rápida de todas

Particularidas de cada ambiente
Embora usem a mesma Javascript Engine, o Chrome e o Node.js adicionam "apetrechos" diferentes à elas
Goocle Crhome:
Possibilidade de manipular o DOM (Document Object Model) por meio do object Document
Possibilidade de acessar informações do navehador com o object window

Node.js
Possibilidade de criar servidores HTTP(APIs)
Possibilidade de manipular arquivos do sistema operacional (criar, editar, deletar)

Em resumo:
O Node.js é um ambiente que permite executarmos código Javascript em um computador
Ele usa a mesma Javascript Engine que o Chrome (V8 Engine)
Ele, assim como o Chrome, adiciona novas funcionalidades à JavaSCript EnginePodemos usá-lo para criar APIs (servidores web)

Como o Node.js funciona?
Possui apenas um núcleo para realizar operações (single threaded)
Suporta várias operações simultâneas (non-blocking). Ele é multi tarefas

Em resumo:
O Node.js consegue executar várias operações ao mesmo tempo usando o seu único núcleo
Em linguagens como Java e C#, um núcleo é criado para cada requisição

Vantagens e Desvantagens
* Vantagens
Baixo uso de memória, pois contém apenas um núcleo
Alta performance (V8 Engine)
Escalabilidade, pois consegue lidar com várias requisições ao memos tempoGrande ecossistema,
 comunidade e presença n o mercado

Desvantagens
Não é ideal para operações que exigem alto uso de computador
Operações matemáticas, processamento de imagem, criptografia, machine learnig

Instalação & Setup

Módulos no Node.js

Introdução ao Módulo.js
Módulos são blocos de código que podemos reutilizar em diferentes partes da nossa aplicação
Podemos exportá-los, importa-los para que outras pessoas possam utiliza-los

Modulos Nativos
O Node.js vem com alguns módulos pré instalados

Módulo FS: manipula arquivos (cria, edita, deleta)
Módulo HTTP: cria um serviedor web
Módulo PATCH: nos ajuda a lidar com diretórios e pastas

 Apretechos do Node.js
 __filename
 __dirname
 
console.log(__filename);
console.log(__dirname);

Deletar arquivo: 
rm -rf message.txt - no wsl, linux
del message.txt - no windows

Deletar/Remover pasta:
rmdir new-folder - no windows

Módulos do NPM
NPM (Node Paackage Manager)
O NPM é um repositório global que contém módulos feitos pela comunidade
Esses módulos, quando instalados, são armazenados no arquivo package.json
Todos os módulos instalados são especificados no arquivo package.json
* Para criá-lo, usamos o comando npm init
* Ele é como se fosse o contrato do nosso projeto Node.js

Também nos referimos aos módulos como depêndencias e bibliotecas

Instalando o NPM:
npm init

Instalando o Nodemon:
npm install nodemon

Instalando o Nodemon: npm install nodemonVerificando a versão:
nodemon -v

Executando o Script:
npm run start

O Nodemon fica monitorando/escutando um arquivo, e a cada alteração/mudança,
 ele Reinicia o arquivo com todas as alterações feitas. 
 Não precismos mais usar o comando node index.js, para executar o arquivo pelo terminal.
 Resumo: Monitora alterações nos arquivos e reinicia o servidor

Execução que não precisa usar script  index.js que stá no package.json
 npx nodemon index.js

 Instalando a depência que gera ID's aleatórios:
 npm install uuid

Removendo a pasta node_modules
rmdir node_modules

Importante: quando removemos a pasta node-modules, 
é como se não tivessemos nehum módulo do NPM instalado no nosso projeto.
Para resolver isso, basta digitar: npm install, 
que ele vai instalar TODAS dependências listas no package.json.
As dependências irão baixar no seu projeto todas atualizadas
Esse acento circunflexo: atualiza as versões das dependências:
"nodemon": "^3.1.10",
"uuid": "^11.1.0"
Isso acontece quando clonamos um repositório no Github

O package-lock.json, guarda a exata versão que está instalada no package.json inicial do projeto (node_modules)
de todas as depêndencias
"nodemon": "^3", => nesse caso ele vai usar qualquer versão 3 do nodemon

O comando npm ci, é similar ao npm install, porém ele instala, as exatas versões
das dependências que estão listadas/basedas no package-lock.json
O comando npm ci, não instala as dependências atualiuzadas
O npm ci, precisa do package-lock.jsom para conseguir executar os comandos e instalar as 
dependências, caso contrário, dá npm ERR!

Importante!
Usa-se:
npm install - para instalar novas dependencias e/ou atualizá-las

Quando clonamos um repositório e nele tem o package-lock.json eque toda equipe de devs, usem a mesmas
versões das dependências dos módulos no projeto
Nesse caso, faz- o clone do projeto do repositório e usa o comando:
npm ci
Que usa a exta versão dos módulos, listados no package-lock.json, e não queremos atualizar as dependências



Tipos de Dependências e Scripts
Tipos de Dependências

Dependências de Produção
São necessárias para a nossa aplicação rodar em produção, 
ou seja, ser usada pelos usuários funcionalidades
Exemplo: React e Express

Dependências de Desenvolvimento
São necessárias apenas durante o processo de Desenvolvimento
Exemplo: ESlint, Prettier e Nodemon

Dependências Globais
São instaladas globalmente no nosso sistema e podem ser usadas em qualquer ptojeto
Exemplo: Nodemon e TypeScript

Removendo o Nodemon
npm uninstall nodemon

Instalando Nodemon cmo dependência de desenvolvimento. devDependencies
npm install nodemon --save-dev
npm install -D nodemon

Conseguimos usar o nodemon: 
npm run start:dev

Quando colocamos o projeto em produção, conseguimos instalar apenas as dependências de Produção,
isso torna o projeto bem mais leve e otimizado

Subindo projeto para produção
Deleta a pasta node-modules
Usa-se a flag production
npm install --production

Removendo o nodemon:
npm uninstall nodemon

Instalando o nodemon globalmente, o mesmo não aparece no package.json
Mas podemos usa-lo como se fosse um programa, pelo terminal
nodemon -v
npm install -g nodemon
nodemon index.js 

Para executar o programa
Nesse caso, é recomendado que haja uma documentação esclarecendo que precisa instalar globalmente 
a dependência do nodemon, pois ela não aparece no arquivo package.json
nodemon index.js

A instalação de dependências globalmente não é recomendada, pois, ela não aparece no package.json
Recomenda-se instalar globalmente: CLI, react native, expo CLi, TypeScript

ES Modules
ES Modules é uma forma mais moderna de importar e exportar módulos, que foi introduzida no ES6
Oferece uma sintaxe mais clara e mais simples

Primeiros passos
Para usá-la, temos que sinalizar para o Node por meio da propriedade type no package.json
Outra forma de usá-lo é usarmos a extensão .mjs nos nossos arquivos 

Dentro da pasta 05_es_modules:
npm init -y => para responder automaticamente, a criação do package.json

IMPORTANTE!
A exportação => export default, significa que, 
Se o arquivo que estiver importando, no caso o index.js, não fizer um Destructuring
Não abrir um objetos e importar o que está sendo exportado em outro arquivo dentro desse objeto
Nesse caso, o que será importado é apenas a função default

A exportação default é indicada somente quando houver apenas um objeto, que você quer exportar

Usando a extenção mjs no arquivo, quando usamos assim, não precisamos usar o "type": "module"
no arquivo package.json:
index.mjs
product.mjs

A ferramenta Bable, converte as exportações ESModule, 
para Common.js(em tempo de produção), para evitar problemas de imcompatibilidade entre 
navegadores
Para usar o ES Module, precisa ter a versão 13 o maior do Node.js

Biblioteca do NPM que não tem suporte ao es module: lodash
npm install lodash

Publicando Módulos no NPM

Quando publicamos um  módulo, qualquer pessoa vai poder instalá-lo, 
e também podemos usá-lo em qualquer projeto

Por exemplo aplocações em React.js, qu seguem umja filosofia de design, e 
os componentes são os mesmo entre as aplicações;
Então cria-se um módulo no NPM com todos esses componentes , e as aplicações que fossem
usar este módulo, podem instala-lo e usar os componentes presentes neste módulo

Para criar o packege.json
npm init -y
import {sum} from "@raianebatista/fullstack";

Publicando um módulo
Fazer o login no terminal na nossa conta no site NPM:
npm login
npm publish (para publicar pacote privato. É PAGO!)

Publicando um pacote público no NPM:
npm publish --access public

Assim temos as versões da nossa aplicação remotamente, para qualquer
pessoa usar nosso módulo

Adicionando arquivos no modulo, para isso deve, alterar a versão no package.json
"version": "1.0.0"; para => "version": "1.0.1";

E publicá-lo novamente:

npm publish --access public

Instalando módulo/biblioteca publicado
Em uma nova pasta:FGHHDBdbDBÇSXVSXV
npm init -y

npm i @raianebatista/fullstack

O que é im código assíncrono?
É um código que leva um tempo para ser executado, podendo variar.
Exemplo: Obter informações de um Banco de dados, pode levar um tempo
(1, 2, 3, 4, 5 segundos) devido a várias fatores
, por exempo, velocidade de internet
Código normal, o Node.js executa linha a linha sequencialmente;

Exemplo de código assíncrono:
setTimeout() {}


Node.js Assíncrono
O código assíncrono leva um tempo para ser executado, porém ele não bloqueia
a execução de outros trechos de código

Call Stack, Callback Queue & Event Loop
Exemplo 1/Código normal:

const x = 1;
const y = 6;
const soma = x + y;

console.log(`A soma é ${y}`)

Call Stack: chama a função main(), que fornece o __filename e o __dirname
Ele executa o código => declara as variáveis sequencialmente, linha a linha
Após a execução do último código, no caso, console.log, 
todo o código será removido do CALL STACK, finaliza a execução da main()/do arquivo

Exemplo 2/Código normal:
const listarPaies = (paises) => {
    paises.forEach((pais) => {
        console.log(pais)
    })
};
const meusPaises = ["Brasil", "Japão"]

listarPaises(meusPaises);

No Call Stack:
5º. console.log('Brasil') -> após ser executado, será removido do CallStack
4º. ('Brasil') => {} ->  após ser executado, será removido do CallStack, próxima iteração
será o Japão
3º. forEach(...) => após todas as iterações este código também será removido
2º. listarpaises([...]) => será removido pois não há mais elementos a serem executados
1º. main() é a primeira a ser executada => após a execução, também será removido do Call Stack


Exemplo de código assíncrono
console.log("Iniciando...");

setTimeout(() => {
    console.log("Temporizador de 3 segundos!")
}, 3000);

setTimeout(() => {
    console.log("Temporizador de 0 segundos!")
}, 0)
console.log("Finalizando...")

Na Call Stack
3º setTimeout() - código assíncrono, Node APIS
2º log ("Iniciando")
1º rodou a função main()


IMPORTANTE! Os códigos assíncronos são enviados para o Node APIs, para serem executados
em segundo plano, para assim poder liberar o Call Stack, por esse motivo, não há o bloqueio
na execução dois outros trechos de código.
Os códigos assíncronos são retirados do Call Stack e enviados para o Node APIs, para serem 
executados em segundo plano
Deixando o Call Stack livre para executar os outros códigos normais ou assincronos

No Node APIs
Todos os código assincronos são enviado para o Node APIs e libera o Call Stack
setTimeout(...,3000)
setTimeout(...,0)


Callback Queue - é um fila que vai "pegando" os resultados das operações que 
estão  no Node APIs
As funções CallBack são armazenadas no CallBack Queue

Exemplo: função CallBack, é um código assincrono pois leva um tempo para ser executado
Após a execução do código assincrono, a função callback é executada/chamada

IMPORTANTE!!
Após todas as execuções dos códigos não assincronos rodarem,
as funções e códigos que estão aguardando no CallBack Queue, são enviados para 
O CallStack, para finalmente serem executadas.

A função  do Event Loop é :
Monitorar a callback queue e enviar callbacks para o call stack quando ele estiver vazio.
O Event Loop é quem monitora as funções que estão no CallBack Queue e envia para 
o CallStack executar e remover deste.

 Por que um setTimeout com 0 segundos pode não ser executado imediatamente?
 Porque ele é tratado como código assincrono e deve esperar o call stack vazio





